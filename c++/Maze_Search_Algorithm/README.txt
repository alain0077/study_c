本プログラムは，
ランダムで生成した迷路を様々な探索手法で探索し，
それぞれの過程と結果を描画します．

実装言語はc++です．
開発は，Visual Studio 2019で行いました．
描画ライブラリとして，DXライブラリ（https://dxlib.xsrv.jp/index.html）を用いました．


exeファイルから実行結果を見れます．




-----実装した探索手法一覧-----
今回のメインのテーマである迷路の探索手法について簡単に...

--深さ優先探索（Depth First Search）--

・とある壁がない1方向を決めて壁にぶつかるまで探索する．
・ぶつかれば，その地点で壁がない方向を探す．
・なければ，その地点から1番近い，壁がない方向が存在する地点まで戻る．
この3ステップ繰り返し，ゴールが見つかるまで探索する．

本プログラムの実装では，方向の優先順位は右＞上＞左＞下となっています．
つまり，スタートの下方向にゴールがあると余計な部分の探索が増えます．
スタートの一つ下にゴールが隣接しているときが最悪？



--幅優先探索（Breadth First Search）--

深さが浅い（スタートから近い）探索可能な地点からから順に探索する手法．
スタートからゴールまでの距離が離れていると探索ステップが増加する．

探索過程を本プログラムで見ると液体をこぼしたような広がり方をしていく様が見られます．
スタートが角にありかつ，その対角にゴールがあると最悪？




--A-Star（Heuristic BFS）--

BFSはスタートから近い探索可能な地点から探索していたのに対し，
このA-Starはゴールまでのマンハッタン距離が近い探索可能な地点から探索する．
また，一定数の候補がそろったときに枝切りを行えばさらに効率の良い探索が期待できる．
このこの探索アルゴリズムは，スタートとゴールの物理的距離が近くても，
壁で遮られて大回りしないといけないような迷路では，より多くの探索ステップ数を要する．

今回はA-StarとしてヒューリスティックなBFSを実装しました．
いうなれば，マンハッタン距離優先探索？
この探索手法が上記の3手法の中では一番速そう？
マンハッタン距離の求め方は，
　d = |goal.x - x| + |goal.y - y|
で実装しました．




-----ランダムな迷路の作成手法-----
本プログラムで用いた迷路作成手法について...

--穴掘り法--
迷路全体を壁で埋める．この時，迷路のサイズは5以上の奇数でなければならない．
次に外周（1番外側）を通路とし，開始座標をx,yがともに任意の偶数になるよう設定する．その開始座標を通路にする．
これにより，通路rから方向dの壁wは，2つ先の地点qが壁であれば，掘ることが可能であることが保証される．
つまり次の3ステップを繰り返せば，迷路が完成する．
・ある指定座標（はじめは開始座標）からある1方向をランダムに決める．
・その方向に壁があり，その先も壁であるような状況が続く限り，その方向について掘り続ける．
・どの方向にも掘れなくなったら，ある通路（x、yがともに偶数）を指定座標とし1番目に戻る．
探索するところ，つまり，偶数座標に壁がなくなれば，探索終了．

本手法は，壁で埋めてから通路をつくるので，人が迷路を作るときの方法に似ています．
そのため，入り組みの多い，ランダム性が強い迷路が出来上ります．
また，掘り進められるところまで掘り進めるというフローがあるので，長い通路ができやすいです．